// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  //must add indexes manually here is link to docs: https://planetscale.com/docs/prisma/prisma-best-practices
  relationMode = "prisma"
}

model User {
  id        String   @unique @default(uuid())
  tenantId  String
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isAdmin   Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  org Org @relation(fields: [tenantId], references: [id])

  @@id([id, tenantId])
  @@index([tenantId])
  @@map("users")
}

model Org {
  id          String @id @default(uuid())
  companyName String @unique

  stripeCustomerId       String?  @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?  @map(name: "stripe_subscription_id")
  stripeCurrentPeriodEnd Int?     @map(name: "stripe_current_period_end")
  updatedAt              DateTime @updatedAt
  createdAt              DateTime @default(now())

  invites   Invite[]
  users     User[]
  agents    Agent[]
  calls     Call[]
  leads     Lead[]
  ResetPass ResetPass[]

  @@map("orgs")
}

model Invite {
  id            String   @default(uuid())
  tenantId      String
  invitedEmail  String
  token         String   @unique
  resendEmailId String
  isActive      Boolean  @default(true)
  //expireAt      DateTime
  createdAt     DateTime @default(now())

  org Org @relation(fields: [tenantId], references: [id])

  @@id([id, tenantId])
  @@index([tenantId])
  @@index([resendEmailId])
  @@map("invites")
}

model ResetPass {
  id            String   @default(uuid())
  tenantId      String
  userId        String
  token         String   @unique
  resendEmailId String
  isActive      Boolean  @default(true)
  expireAt      DateTime
  createdAt     DateTime @default(now())

  org Org @relation(fields: [tenantId], references: [id])

  @@id([id, tenantId])
  @@index([tenantId])
  @@index([resendEmailId])
  @@map("ResetPass")
}

model Agent {
  id            String  @unique
  tenantId      String
  phoneNumberId String
  sipURI        String  @unique
  isArchived    Boolean @default(false)

  org Org @relation(fields: [tenantId], references: [id])

  calls Call[]

  @@id([id, tenantId])
  @@index([tenantId])
  @@map("agents")
}

model Call {
  id               String   @unique
  agentId          String
  tenantId         String
  recording        String
  transcript       String   @db.LongText
  summary          String   @db.MediumText
  cost             Float
  stripeBilledCall Boolean  @default(false)
  durationSeconds  Int
  timestamp        Int
  createdAt        DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id])
  org   Org   @relation(fields: [tenantId], references: [id])

  lead Lead?

  @@id([id, tenantId])
  @@index([tenantId])
  @@index([agentId])
  @@map("calls")
}

model Lead {
  id        String   @unique @default(uuid())
  callId    String   @unique
  tenantId  String
  data      Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  call Call? @relation(fields: [callId], references: [id])
  org  Org   @relation(fields: [tenantId], references: [id])

  @@id([id, tenantId])
  @@index([tenantId])
  @@map("leads")
}

model contactForm {
  id      String @id @default(uuid())
  name    String
  email   String
  company String
  subject String
  message String @db.LongText

  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @default(uuid())
  tenantId  String
  message   String   @db.LongText
  createdAt DateTime @default(now())

  @@id([id, tenantId])
}
